// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

import {Test, console} from "forge-std/Test.sol";
import {SingleAssetStableCoin} from "../src/SingleAssetStableCoin.sol";
import {MockV3Aggregator} from "../lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.8/tests/MockV3Aggregator.sol";

contract SingleAssetStableCoinTest is Test {
    SingleAssetStableCoin public ssc;
    MockV3Aggregator public priceFeed;
    address public constant ETH_USD_PRICE_FEED = 0x694AA1769357215DE4FAC081bf1f309aDC325306;

    function setUp() public {
        // Deploy mock price feed with initial ETH price of $2500
        priceFeed = new MockV3Aggregator(8, int256(INITIAL_ETH_PRICE));
        // Instantiate the SingleAssetStableCoin contract
        ssc = new SingleAssetStableCoin(address(priceFeed));
    }

    function test_ContractInstantiation() public {
        // Verify contract is deployed
        assertTrue(address(ssc) != address(0), "Contract should be deployed");

        // Verify token details
        assertEq(ssc.name(), "SingleAssetStableCoin", "Token name should be SingleAssetStableCoin");
        assertEq(ssc.symbol(), "SSC", "Token symbol should be SSC");
        assertEq(ssc.decimals(), 18, "Token decimals should be 18");

        // Verify owner
        assertEq(ssc.owner(), address(this), "Owner should be the test contract");

        // Verify price feed address
        assertEq(ssc.getEthPriceFeed(), address(priceFeed), "Price feed address should match");
    }
}
